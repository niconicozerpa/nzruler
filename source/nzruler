#!/usr/bin/python3
# -*- coding: utf-8 -*-

'''
Copyright (c) 2015, Raúl Nicolás López Zerpa
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

* Redistributions of source code must retain the above copyright notice, this
  list of conditions and the following disclaimer.

* Redistributions in binary form must reproduce the above copyright notice,
  this list of conditions and the following disclaimer in the documentation
  and/or other materials provided with the distribution.

* Neither the name of nzruler nor the names of its
  contributors may be used to endorse or promote products derived from
  this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
'''

import sys

from PyQt5.QtCore import *
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *

class Regla(QMainWindow):
	_yellow = QColor(255, 255, 128, 255)
	_black = QColor(0, 0, 0, 255)
	_blue = QColor(0, 0, 170, 255)
	_red = QColor(255, 0, 0, 255)
	
	_mouseOffset = {
		'x': 0,
		'y': 0,
		'dx': 0,
		'dy': 0
	}
	_mouseIsPressed = False
	_resizeArea = 12;
	_oldCursor = Qt.ArrowCursor
	_mouse = {
		'x': 0,
		'y': 0
	}
	
	_font = QFont("FreeSans, Helvetica, Arial, sans-serif", 9, QFont.Bold, False)
	_safePos = 33
	_vertical = False
	
	_settings = QSettings("nzruler", "nzruler")
	
	
	def __init__(self, parent = None, flags = 0):
		QFrame.__init__(self, parent, flags)
		
		if self._settings.contains("position"):
			firstPos = self._settings.value("position", type=QPoint)
		else:
			firstPos = QPoint(100, 100)
			
		if self._settings.contains("size"):
			firstSize = self._settings.value("size", type=QSize)
		else:
			firstSize = QSize(200, 60)
		
		if self._settings.contains("vertical"):	
			firstVertical = self._settings.value("vertical", type=bool)
		else:
			firstVertical = False
			
		self._vertical = firstVertical
		QFrame.move(self, firstPos.x(), firstPos.y())
		QFrame.resize(self, firstSize.width(), firstSize.height())
		
		self.setMouseTracking(True)
		self.setFocusPolicy(Qt.ClickFocus | Qt.WheelFocus | Qt.TabFocus | Qt.StrongFocus)
	
	
	def closeEvent(self, event):
		self._settings.setValue("position", self.pos())
		self._settings.setValue("size", self.size())
		self._settings.setValue("vertical", self._vertical)
				
	def mousePressEvent(self, event):
		if event.buttons() & Qt.LeftButton:
			self._mouseIsPressed = True
			self._mouseOffset['x'] = event.x()
			self._mouseOffset['y'] = event.y()
			self._mouseOffset['dx'] = self.width() - self._mouseOffset['x']
			self._mouseOffset['dy'] = self.height() - self._mouseOffset['y']
	
	def mouseReleaseEvent(self, event):
		if self._mouseIsPressed:
			self._mouseIsPressed = False
			
	
	def keyPressEvent(self, event):
		key = event.key()
		
		if key == Qt.Key_Escape:
			self.close()
		else:
			increment = 3 if (event.modifiers() & Qt.ShiftModifier) else 1
	
			if event.modifiers() & Qt.AltModifier :
				size = self.size()
				if key == Qt.Key_Left:
					self.resize(size.width() - increment, size.height())
				elif key == Qt.Key_Up:
					self.resize(size.width(), size.height() - increment)
				elif key == Qt.Key_Right:
					self.resize(size.width() + increment, size.height())
				elif key == Qt.Key_Down:
					self.resize(size.width(), size.height() + increment)
				
			else:
				pos = self.pos()
				
				if key == Qt.Key_Left:
					self.move(pos.x() - increment, pos.y())
				elif key == Qt.Key_Up:
					self.move(pos.x(), pos.y() - increment)
				elif key == Qt.Key_Right:
					self.move(pos.x() + increment, pos.y())
				elif key == Qt.Key_Down:
					self.move(pos.x(), pos.y() + increment)
	
	def mouseMoveEvent(self, event):
		x = event.globalX()
		y = event.globalY()
		lx = event.x()
		ly = event.y()
		w = self.width()
		h = self.height()
		
		self._mouse['x'] = lx
		self._mouse['y'] = ly
		
		if self._mouseIsPressed:
			
			if self._oldCursor == Qt.SizeHorCursor:
				
				self.resize(lx + self._mouseOffset['dx'], h)
			elif self._oldCursor == Qt.SizeVerCursor:
				self.resize(w, ly + self._mouseOffset['dy'])
			elif self._oldCursor == Qt.SizeFDiagCursor:
				self.resize(lx + self._mouseOffset['dx'], ly + self._mouseOffset['dy'])
			else:
				self.move(x - self._mouseOffset['x'], y - self._mouseOffset['y'])
		else:
			if lx > (w - self._resizeArea) and ly > (h - self._resizeArea):
				newCursor = Qt.SizeFDiagCursor
			elif lx > (w - self._resizeArea):
				newCursor = Qt.SizeHorCursor
			elif ly > (h - self._resizeArea):
				newCursor = Qt.SizeVerCursor
			else:
				newCursor = Qt.ArrowCursor
			
			if newCursor != self._oldCursor:
				self.setCursor(newCursor)
				self._oldCursor = newCursor
			
			self.update()
			
	def resize(self, width, height):
		
		minWidth = 60
		minHeight = 60
		
		if width < minWidth:
			width = minWidth
		if height < minHeight:
			height = minHeight
		
		if width != height:
			self._vertical = (width < height)
		
		QWidget.resize(self, width, height)
	
	def paintEvent(self, e):
		pnt = QPainter()
		pnt.begin(self)
		pnt.setFont(self._font)
		
		pnt.drawRect(0, 0, self.width() - 1, self.height() - 1)
		pnt.fillRect(1, 1, self.width() - 2, self.height() - 2, self._yellow)
		
		self._safePos = 0 if self._vertical else 33
			
		size = self.height() if self._vertical else self.width()
		
		pnt.setPen(self._red)
		
		if self._vertical:
			labelLength = QStaticText(str(self.height()))
			limit = (self.height() - 3 - labelLength.size().height())
			pnt.drawStaticText(17.5, limit, labelLength)
		else:
			labelLength = QStaticText(str(self.width()))
			limit = (self.width() - 3 - labelLength.size().width())
			pnt.drawStaticText(limit, 17.5, labelLength)
		
		pnt.setPen(self._black)
		
		for i in range(2, size - 1, 2):
			if i % 50 == 0:
				length = 15
			elif i % 10 == 0:
				length = 10
			else:
				length = 5
			
			if self._vertical:
				pnt.drawLine(0, i, length, i)
			else:
				pnt.drawLine(i, 0, i, length)
			
			if length == 15:
				label = QStaticText(str(i))
				
				if self._vertical:
					labelX = 17.5
					labelY = i - (label.size().height() / 2)
					
					if self._safePos < (labelX + label.size().width()) :
						self._safePos = labelX + label.size().width() + 5
						
					drawLabel = (labelY + label.size().height()) < limit
					
				else:
					labelX = i - (label.size().width() / 2)
					labelY = 17.5
					
					drawLabel = (labelX + label.size().width()) < limit
				
				if(drawLabel):
					pnt.drawStaticText(labelX, labelY, label)
		
		if not self._mouseIsPressed:
			pnt.setPen(self._blue)
			
			if self._vertical:
				pnt.drawLine(0, self._mouse['y'], self.width(), self._mouse['y'])
			else:
				pnt.drawLine(self._mouse['x'], 0, self._mouse['x'], self.height())
			
			label = QStaticText(str(self._mouse['y'] if self._vertical else self._mouse['x']))
			
			if self._vertical:
				posX = self._safePos
				posY = self._mouse['y'] + 5
				
				drawLabel = (posY + label.size().height()) > limit
			else:
				posX = self._mouse['x'] + 5
				posY = self._safePos
			
				if posX + label.size().width() > (self.width() - 5) :
					posX = self._mouse['x'] - 5 - label.size().width()
			
			pnt.drawStaticText(posX, posY, label)

app = QApplication(sys.argv)  
MainWindow = Regla(parent=None, flags=Qt.FramelessWindowHint)

MainWindow.show()
sys.exit(app.exec_())
